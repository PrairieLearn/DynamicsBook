<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>Vectors and bases</title>
    <link href="style.css" type="text/css" rel="stylesheet" />
    <link href="icomoon.css" type="text/css" rel="stylesheet" />

    <script src="mathjax/MathJax.js?config=default" type="text/javascript"></script>
    <script src="jquery-1.7.2.min.js" type="text/javascript"></script>
    <script src="sylvester.js" type="text/javascript"></script>
    <script src="sha1.js" type="text/javascript"></script>
    <script src="PrairieDraw.js" type="text/javascript"></script>
    <script src="rvv_py_triples.js" type="text/javascript"></script>
    <script src="rvv.js" type="text/javascript"></script>
    <script src="pageControl.js" type="text/javascript"></script>
  </head>
  <body>
    <div class="container">
      <div class="header"><h1>TAM 212: Introductory Dynamics</h1></div>
      <div class="navbar">
        <ul>
          <li><a href="index.xhtml" id="navHome">Home</a></li>
          <li><a href="info.xhtml" id="navInfo">Info</a>
          </li><li><a href="people.xhtml" id="navPeople">People</a>
          </li><li><a href="sched.xhtml" id="navSched">Schedule</a></li>
          <li><a href="ref.xhtml" id="navRef">Reference</a>
          </li><li><a href="apps.xhtml" id="navApps">Applications</a></li>
        </ul>
      </div>
      <div class="browserWarning">
        <strong>Warning:</strong>
        This website has only been tested on Chrome version 24 and higher. Your browser may not be fully supported.
      </div>
      <div class="mainBlock">
    <div class="contentBlock">
      <div id="rvv" class="contentCol">
        <h1>
          Vectors and bases
        </h1>
        <p>
          A <em>vector</em> is an arrow with a length and a
          direction. Just like positions, vectors exist before we
          measure or describe them. Unlike positions, vectors can
          mean many different things, such as position vectors,
          velocities, etc. Vectors are not anchored to particular
          positions in space, so we can slide a vector around and
          locate it at any position.
        </p>
        <div class="figureContainer width400" id="rvv-fc">
          <canvas id="rvv-fc-c" width="300" height="200" class="figureImage">
          </canvas>
          <p class="controls">
            <button class="anim-toggle:rvv-fc-c">animate</button>
            <button class="reset:rvv-fc-c">reset</button>
            Change:
            <button class="option-toggle:rvv-fc-c:otherLength">length</button>
            <button class="option-toggle:rvv-fc-c:otherDir">direction</button>
          </p>
          <p class="figureCaption">
            Two vectors, which may or may not be the same
            vector. Moving a vector around does not change it: it is
            still the same vector.
          </p>
        </div>
      </div>
      <div class="infoCol">
        <div class="infoBox notationBox">
          <p>
            Some textbooks differentiate between <em>free
            vectors</em>, which are free to slide around, and
            <em>bound vectors</em>, which are anchored in space. We
            will only use free vectors.
          </p>
        </div>
        <div class="infoBox notationBox">
          <p>
            We will use the over-arrow notation $\vec{a}$ for vector
            quantities. Other common notations include bold
            $\boldsymbol{a}$ and under-bars $\underline{a}$. For unit
            (length one) vectors we will use an over-hat $\hat{a}$.
          </p>
        </div>
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-sa" class="contentCol">
        <h2>
          Adding and scaling vectors
        </h2>
        <p>
          Vectors can be multiplied by a scalar number, which
          multiplies their length. Vectors can also be added
          together, using the <em>parallelogram law of
          addition</em> or the <em>head-to-tail</em> rule.
        </p>
        <div class="figureContainer width600" id="rvv-fp">
          <canvas id="rvv-fp-c" width="600" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            Adding and scaling vectors to give new vectors.
          </p>
        </div>
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-sv" class="contentCol">
        <h2>
          Vector basis
        </h2>
        <p>
          To describe vectors mathematically, we write them as a
          combination of <em>basis vectors</em>. An <em>orthonormal
          basis</em> is a set of two (in 2D) or three (in 3D) basis
          vectors which are <em>orthogonal</em> (have 90°
          angles between them) and <em>normal</em> (have length equal
          to one). We will not be using non-orthogonal or non-normal
          bases.
          <p>
          </p>
          Any other vector can be written as a <em>linear
          combination</em> of the basis vectors:
        </p>
        <div class="envContainer equation" id="rvv-ec">
          <p class="envHeader">Components of a vector</p>
          <div class="envBody">
            <p>
              \[\vec{a} = a_1 \,\hat{\imath}
              + a_2 \,\hat{\jmath} + a_3 \,\hat{k}\]
            </p>
          </div>
        </div>
        <p>
          The numbers $a_1, a_2, a_3$ are called the
          <em>components</em> of $\vec{a}$ in the $\,\hat{\imath},
          \hat{\jmath}, \hat{k}$ basis. If we are in 2D then we will
          only have two components for a vector.
        </p>
        <div class="figureContainer width600" id="rvv-fb">
          <canvas id="rvv-fb-c" width="300" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            Writing a vector as the sum of scaled basis vectors. The
            scale factors are the components of the vector. Here
            $\vec{a} = 3\hat\imath + 2\hat\jmath$, so the components
            of $\vec{a}$ are $a_1 = 3$ and $a_2 = 2$.
          </p>
        </div>
      </div>
      <div class="infoCol">
        <div class="infoBox factBox">
          <p>
            The use of the letter $i,j,k$ for basis vectors is due to
            <a
            href="http://en.wikipedia.org/wiki/William_Rowan_Hamilton">William
            Hamilton</a>, who was motivated by thinking of basis
            vectors as extensions of complex numbers. This notation
            was popularized by the book <a
            href="http://en.wikipedia.org/wiki/Vector_Analysis_(Gibbs/Wilson)"><i>Vector
            Analysis: A Text Book for the Use of Students of
            Mathematics and Physics Founded upon the Lectures of
            J. Willard Gibbs</i></a> (1901), by <a
            href="http://en.wikipedia.org/wiki/Edwin_Bidwell_Wilson">E. B. Wilson</a>. This
            book also introduced the use of bold letters to represent
            vectors.
          </p>
        </div>
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-sl" class="contentCol">
        <h2>
          Length of vectors
        </h2>
        <p>
          The length of a vector $\vec{a}$ is written
          either $\|\vec{a}\|$ or just plain $v$. The
          length can be computed using <em>Pythagorus’
          theorem</em>:
        </p>
        <div class="envContainer equation" id="rvv-ey">
          <p class="envHeader">
            Pythagorus' length formula.
          </p>
          <div class="envBody">
            <p>\[a = \|\vec{a}\|
            = \sqrt{a_1^2 + a_2^2 + a_3^2}\]</p>
          </div>
        </div>
        <div class="envContainer warning" id="rvv-wl">
          <p class="envHeader">
            Warning: Length must be computed in a single basis.
          </p>
          <div class="envBody">
            <p>
              The Pythagorean length formula can only be used if all
              the components are written in a single orthonormal
              basis.
            </p>
          </div>
        </div>
        <div class="figureContainer width600" id="rvv-fl">
          <canvas id="rvv-fl-c" width="300" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            Computing the length of a vector using Pythagorus'
            theorem.
          </p>
        </div>
        <p>
          Some common integer vector lengths are $\vec{a} =
          4\hat\imath + 3\hat\jmath$ (length $a = 5$) and $\vec{b} =
          12\hat\imath + 5\hat\jmath$ (length $b = 13$).
        </p>
        <div class="envContainer warning" id="rvv-wa">
          <p class="envHeader">
            Warning: Adding vectors does not add lengths.
          </p>
          <div class="envBody">
            <p>
              If $\vec{c} = \vec{a} + \vec{b}$, then $\|\vec{c}\| \ne
              \|\vec{a}\| + \|\vec{b}\|$ unless $\vec{a}$ and
              $\vec{b}$ are parallel and in the same direction.
            </p>
            <p>
              It will always be true, however, that $\|\vec{c}\| \le
              \|\vec{a}\| + \|\vec{b}\|$. This fact is known as the
              <em>triangle inequality</em>, for reasons that should be
              obvious.
            </p>
          </div>
        </div>
      </div>
      <div class="infoCol">
        <div class="infoBox factBox">
          <p>
            Sets of three integers $a,b,c$ where $a^2 + b^2 = c^2$ are
            called <em>Pythagorean triples</em>. A long list of such
            triples is given on the <a
            href="http://en.wikipedia.org/wiki/Plimpton_322">Plimpton
            322</a> clay tablet written by the ancient Babylonians
            around 1800 BCE, although it is unclear how they generated
            these numbers. Pythagorean triples lead to complex
            mathematics, including the curious patterns shown below
            and <a
            href="http://en.wikipedia.org/wiki/Fermat's_Last_Theorem">Fermat's
            Last Theorem</a>.
          </p>
          <div class="imageBox width250">
            <canvas id="rvv-ft-c" width="250" height="250">
            </canvas>
            <p class="caption">
              The values of $a$ and $b$ for all Pythagorean triples
              $a,b,c$ with $a$ and $b$ up to 2000.
            </p>
          </div>
        </div>
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-su" class="contentCol">
        <h2>
          Unit vectors
        </h2>
        <p>
          A <em>unit vector</em> is any vector with a length of
          one. We use the special over-hat notation $\vec{a}$ to
          indicate when a vector is a unit vector. Any non-zero vector
          $\vec{a}$ gives a unit vector $\hat{a}$ that specifies the
          direction of $\vec{a}$.
        </p>
        <div class="envContainer equation" id="rvv-eu">
          <p class="envHeader">
            Normalization to unit vector.
          </p>
          <div class="envBody">
            <p>
              \[\begin{aligned} \hat{a} =
              \frac{\vec{a}}{a}\end{aligned}\]
            </p>
          </div>
        </div>
        <div class="envContainer derivation">
          <div class="envBody">
            <p>
              If we compute the length of $\hat{a}$ then we find:
              \[
              \| \hat{a} \| = \left\| \frac{\vec{a}}{a} \right\|
              = \frac{\|\vec{a}\|}{a} = \frac{a}{a} = 1,
              \]
              so $\hat{a}$ is really a unit vector, and it is in the
              same direction as $\vec{a}$ as they differ only by a
              scalar factor.
            </p>
          </div>
        </div>
        <p>
          Any vector can be written as the product of its length and
          direction:
        </p>
        <div class="envContainer equation" id="rvv-ei">
          <p class="envHeader">
            Vector decomposition into length and direction.
          </p>
          <div class="envBody">
            <p>
              \[\begin{aligned} \vec{a} = a
              \hat{a}\end{aligned}\]
            </p>
          </div>
        </div>
        <div class="envContainer derivation">
          <div class="envBody">
            <p>
              This follows from rearranging <a
              href="#rvv-eu">#rvv-eu</a>.
            </p>
          </div>
        </div>
        <div class="figureContainer width400" id="rvv-fu">
          <canvas id="rvv-fu-c" width="400" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            Three vectors and their decompositions into lengths and
            directional unit vectors.
          </p>
        </div>
      </div>
      <div class="infoCol">
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-sd" class="contentCol">
        <h2>
          Dot Product
        </h2>
        <p>
          The <em>dot product</em> (also called the <em>inner
          product</em> or <em>scalar product</em>) is defined by
        </p>
        <div class="envContainer equation" id="rvv-es">
          <p class="envHeader">
            Dot product from components.
          </p>
          <div class="envBody">
            <p>
              \[\vec{a} \cdot \vec{b}
              = a_1 b_1 + a_2 b_2 + a_3 b_3\]
            </p>
          </div>
        </div>
        <p>
          An alternative expression for the dot product can be
          given in terms of the lengths of the vectors and the
          angle between them:
        </p>
        <div class="envContainer equation" id="rvv-ed">
          <p class="envHeader">
            Dot product from length/angle.
          </p>
          <div class="envBody">
            <p>
              \[\vec{a} \cdot \vec{b}
              = a b \cos\theta\]
            </p>
          </div>
        </div>
        <div class="envContainer derivation">
          <div class="envBody">
            <p>
              We will present a simple 2D proof here. A more complete proof in 3D uses the law of cosines.
            </p>
            <p>
              Start with two vectors $\vec{a}$ and $\vec{b}$ with an
              angle $\theta$ between them, as shown below.
            </p>
            <canvas id="rvv-ed-c" width="400" height="400">
            </canvas>
            <p>
              Observe that the angle $\theta$ between vectors
              $\vec{a}$ and $\vec{b}$ is the difference between the
              <button
              class="option-toggle:rvv-ed-c:angles">angles</button>
              $\theta_a$ and $\theta_b$ from horizontal.
            </p>
            <p>
              If we use the angle sum formula for cosine, we have
            </p>
            <p>
              \[\begin{aligned} a b \cos\theta &amp;= a b
              \cos(\theta_b - \theta_a) \\ &amp;= a b (\cos\theta_b
              \cos\theta_a + \sin\theta_b \sin\theta_a)
              \end{aligned}\]
            </p>
            <p>
              We now want to express the sine and cosine of $\theta_a$
              and $\theta_b$ in terms of the <button
              class="option-toggle:rvv-ed-c:components">components</button>
              of $\vec{a}$ and $\vec{b}$.
            </p>
            <p>
              We re-arrange the expression so that we can use the fact
              that $a_1 = a \cos\theta_a$ and $a_2 = a \sin\theta_a$,
              and similarly for $\vec{b}$. This gives:
            </p>
            <p>
              \[\begin{aligned} a b \cos\theta &amp;= (a \cos\theta_a)
              (b \cos\theta_b) + (a \sin\theta_a) (b \sin\theta_b) \\
              &amp;= a_1 b_1 + a_2 b_2 \\ &amp;= \vec{a} \cdot \vec{b}
              \end{aligned}\]
            </p>
          </div>
        </div>
        <p>
          The fact that we can write the dot product <a
          href="#rvv-es">in terms of components</a> as well as <a
          href="#rvv-ed">in terms of lengths and angle</a> is very
          helpful for calculating the length and angles of vectors
          from the component representations.
        </p>

        <div class="envContainer equation" id="rvv-el">
          <p class="envHeader">
            Length and angle from dot product.
          </p>
          <div class="envBody">
            <p>
              \[\begin{aligned} a &amp;= \sqrt{\vec{a} \cdot
              \vec{a}} \\ \cos\theta &amp;= \frac{\vec{b}
              \cdot \vec{a}}{b a}\end{aligned}\]
            </p>
          </div>
        </div>
        <div class="envContainer derivation">
          <div class="envBody">
            <p>
              The angle between $\vec{a}$ and itself is $\theta = 0$,
              so $\vec{a} \cdot \vec{a} = a^2 \cos 0 = a^2$, which
              gives the first equation for the length in terms of the
              dot product.
            </p>
            <p>
              The second equation is a rearrangement of <a
              href="#rvv-ed">#rvv-ed</a>.
            </p>
          </div>
        </div>
      </div>
      <div class="infoCol">
        <div class="infoBox applicationsBox">
          <ul>
            <li><a href= "aos.xhtml">Shortest flight paths</a></li>
          </ul>
        </div>
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-sc" class="contentCol">
        <h2>
          Cross Product
        </h2>
        <p>
          The cross product can be defined in terms of components by:
        </p>
        <div class="envContainer equation" id="rvv-ex">
          <p class="envHeader">
            Cross product in components
          </p>
          <div class="envBody">
            <p>\[
            \vec{b} \times \vec{a}
            = (b_2 a_3 - b_3 a_2) \,\hat{\imath}
            + (b_3 a_1 - b_1 a_3) \,\hat{\jmath}
            + (b_1 a_2 - b_2 a_1) \,\hat{k}
            \]
            </p>
          </div>
        </div>
        <div class="envContainer warning" id="rvv-wc">
          <p class="envHeader">
            Warning: Cross product is not associative
          </p>
          <div class="envBody">
            <p>
              The cross product is not <a
              href="http://en.wikipedia.org/wiki/Associative_property">associative</a>,
              meaning that in general

              \[\vec{a} \times (\vec{b} \times \vec{c})
              \ne (\vec{a} \times \vec{b}) \times \vec{c}.\]

              For example,

              \[\begin{aligned}
              \hat{\imath} \times (\hat{\imath} \times \hat{\jmath})
              &amp;= \hat{\imath} \times \hat{k} = - \hat{\jmath} \\
              (\hat{\imath} \times \hat{\imath}) \times \hat{\jmath}
              &amp;= \vec{0} \times \hat{\jmath} = \vec{0}.
              \end{aligned}\]

              This means that we should never write an expression like

              \[\vec{a} \times \vec{b} \times \vec{c}\]

              because it is not clear in which order we should perform
              the cross products. Instead, if we have more than one
              cross product, we should always use parentheses to
              indicate the order.
            </p>
          </div>
        </div>
        <p>
          Alternatively, the cross product can be defined by
          specifying the length and direction of the resulting
          vector. The direction of $\vec{b} \times \vec{a}$ is
          orthogonal to both $\vec{b}$ and $\vec{a}$, with the
          direction given by the <a href="">right-hand-rule</a>. The
          magnitude of the cross product is given by:
        </p>
        <div class="envContainer equation" id="rvv-el">
          <p class="envHeader">
            Cross product length
          </p>
          <div class="envBody">
            <p>
              \[\| \vec{b} \times \vec{a} \| = b a \sin\theta\]
            </p>
          </div>
        </div>
        <div class="envContainer derivation">
          <div class="envBody">
          <p>This can be derived <a href="rvi.xhtml#rvi.el">from Lagrange's identity</a>.</p>
          </div>
        </div>
        <p>
          This second form of the cross product definition can also be
          related to the area of a parallelogram.
        </p>
        <div class="figureContainer width400" id="rvv-fx">
          <canvas id="rvv-fx-c" width="400" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            The area of a parallelogram is the length of the base
            multiplied by the perpendicular height, which is also the
            magnitude of the cross product of the side vectors.
          </p>
        </div>
      </div>
      <div class="infoCol">
      </div>
    </div>
    <div class="contentBlock">
      <div id="rvv-so" class="contentCol">
        <h2>
          Orthogonal projection and orthogonal complement
        </h2>
        <p>
          The orthogonal projection and orthogonal complement are:
        </p>
        <div class="envContainer equation" id="rvv-ep">
          <p class="envHeader">
            Orthogonal projection of $\vec{a}$ onto $\vec{b}$.
          </p>
          <div class="envBody">
            <p>
              \[\operatorname{Proj}(\vec{a},\vec{b})
              = (\vec{a} \cdot \hat{b}) \hat{b}
              = (a \cos\theta) \, \hat{b}
              \]
            </p>
          </div>
        </div>
        <div class="envContainer equation" id="rvv-em">
          <p class="envHeader">
            Orthogonal complement of $\vec{a}$ with respect to
            $\vec{a}$.
          </p>
          <div class="envBody">
            <p>
              \[\begin{aligned}
              \operatorname{Comp}(\vec{a}, \vec{b})
              &amp;= \vec{b} -
              \operatorname{Proj}(\vec{b}, \vec{a}) =
              \vec{b} - (\vec{b} \cdot \hat{a}) \hat{a} \\
              \left\|
              \operatorname{Comp}(\vec{a}, \vec{b}) \right\|
              &amp;= a \sin\theta
              \end{aligned}\]
            </p>
          </div>
        </div>
        <p>
          Adding the orthogonal projection and the orthogonal
          complement of a vector just give the same vector again, as
          we can see on the figure below.
        </p>
        <div class="figureContainer width400" id="rvv-fm">
          <canvas id="rvv-fm-c" width="400" height="200" class="figureImage">
          </canvas>
          <p class="figureCaption">
            Orthogonal projection $\vec{a}$ onto $\vec{b}$ and the
            corresponding orthogonal complement.
          </p>
        </div>
      </div>
      <div class="infoCol">
      </div>
    </div>
    <!--
    <div class="contentBlock">
      <div id="rvv-sb" class="contentCol">
        <h2>
          Changing bases
        </h2>
        <p>
          To change the basis that a vector is written in, we need
          to know how the basis vectors are related. We do this by
          writing one set of basis vectors in terms of the other
          basis vectors. If we want to change from
          $\hat\imath,\hat\jmath$ to $\hat{a},\hat{b}$, then we
          need to write $\hat\imath,\hat\jmath$ in terms of
          $\hat{a},\hat{b}$.
        </p>
        <div class="envContainer example" id="rvv-xn">
          <p class="envHeader">
            Example: Basis change
          </p>
          <div class="envBody">
            <p>
              For example, if we have $\vec{a} =
              3\,\hat{\imath} + 2\,\hat{\jmath}$ and we want to
              write this in the $\,\hat{a}, \,\hat{b}$ basis,
              then we need to know $\,\hat{\imath},
              \,\hat{\jmath}$ in terms of $\,\hat{a},
              \,\hat{b}$. For example,
            </p>
            <p>
              \[\begin{aligned} \,\hat{\imath} &amp;=
              \frac{1}{\sqrt{2}} \,\hat{a} - \frac{1}{\sqrt{2}}
              \,\hat{b} \\ \,\hat{\jmath} &amp;= \frac{1}{\sqrt{2}}
              \,\hat{a} + \frac{1}{\sqrt{2}}
              \,\hat{b}\end{aligned}\]
            </p>
            <p>
              Then we can substitute and re-arrange:
            </p>
            <p>
              \[\begin{aligned} \vec{a} &amp;=
              3\,\hat{\imath} + 2\,\hat{\jmath} \\ &amp;=
              3\left(\frac{1}{\sqrt{2}} \,\hat{a} -
              \frac{1}{\sqrt{2}} \,\hat{b}\right) +
              2\left(\frac{1}{\sqrt{2}} \,\hat{a} +
              \frac{1}{\sqrt{2}} \,\hat{b}\right) \\ &amp;=
              \left(\frac{3}{\sqrt{2}} + \frac{2}{\sqrt{2}} \right)
              \,\hat{a} + \left(-\frac{3}{\sqrt{2}} +
              \frac{2}{\sqrt{2}} \right) \,\hat{b} \\ &amp;=
              \frac{5}{\sqrt{2}} \,\hat{a} - \frac{1}{\sqrt{2}}
              \,\hat{b}\end{aligned}\]
            </p>
            <p>
              If we want to convert back the other way then we
              would need to know $\,\hat{a}, \,\hat{b}$ in terms
              of $\,\hat{\imath}, \,\hat{\jmath}$. We can find
              this by solving for $\,\hat{a}, \,\hat{b}$ above.
            </p>
          </div>
        </div>
        <p>
          <strong>Important:</strong> Vector expressions are true
          no matter which basis we write the vectors in, even if
          they are written in different bases.
        </p>
        <div class="envContainer example" id="rvv-xa">
          <p class="envHeader">
            Example: Vector addition in different bases.
          </p>
          <div class="envBody">
            <p>
              $\vec{c} = \vec{b} + 2
              \vec{a}$, draw the image. This is true no
              matter which bases are being used for
              $\vec{b}$ and $\vec{a}$. For
              example, even if we use different bases:
              $\vec{b} = 3\,\hat{\imath} +
              2\,\hat{\jmath}$ and $\vec{a} = 5\,\hat{a} -
              \,\hat{b}$, then $\vec{c} = 3\,\hat{\imath}
              + 2\,\hat{\jmath} + 10\,\hat{a} - 2\,\hat{b}$ is
              true. Of course, we would normally convert these to a
              single basis, but we don’t have to.
            </p>
            <canvas id="rvv-xa-c" width="400" height="400"></canvas>
            <script type="application/javascript">
              /* <![CDATA[ */
              rvv_xa_c = new PrairieDrawAnim("rvv-xa-c", function(t) {
              this.addOption("components",false);

              var back = {start:  0,         end: Math.PI/4, initial: 1, fin: 2};
              var forth = {start: Math.PI/4, end: Math.PI/2, initial: 2.15, fin: 0.75};
              var states = [back, forth];
              var transTimes = [1, 1];
              var holdTimes = [2, 2];
              var state = this.sequence(states, transTimes, holdTimes, t);
	      
              this.setUnits(4, 4);
              this.setProp("arrowLineWidthPx",2);
              
              this.translate($V([-1,-1]));
              
              var O = $V([0,0]);
              var P = $V([1,2]);
              var X = this.vector2DAtAngle(state.start).x(state.initial);
              var Y = this.vector2DAtAngle(state.end+Math.PI/4).x(state.fin);
	      
              this.arrow(O, P);
              this.text($V([1.25, 2.25]), $V([1,1]), "c = b + a");
              
              if (this.getOption("components")) {
              this.arrow(O, X);
	      this.arrow(O, Y);
	      
	      if (t % 6 == 0 || (t % 6 >= 4 && t % 6 < 6)){ //state.index == 0
	      this.text($V([0.5,-0.2]), $V([1,-1]), "b");
	      this.text($V([-0.1,1]), $V([0,1]), "a");
	      }
	      else if (t % 6 >= 1 && t % 6 < 3){ //state.index == 1
	      this.text($V([0.85,0.6]), $V([1,-1]), "b");
	      this.text($V([-0.3,0.3]), $V([0,1]), "a");
	      }	
              }
	      
              //AXES
              this.setProp("arrowLineWidthPx",1);
              this.arrow($V([0,0]), $V([3,0]));
              this.text($V([3,0.1]), $V([1,0]), "i");
              this.arrow($V([0,0]), $V([0,3]));
              this.text($V([0.1,3]), $V([0,1]), "j");
              
              this.arrow($V([0,0]), $V([3,3]));
              this.text($V([2.8,3]), $V([1,1]), "a");
              this.arrow($V([0,0]), $V([-1,1]));
              this.text($V([-0.8,1]), $V([-1,1]), "b");
              });
              /* ]]> */
            </script>
            <p>
              <button onclick="rvv_xa_c.toggleOption('components');">See Components</button>
              <button onclick="rvv_xa_c.toggleAnim();">Change Basis</button>
            </p>
          </div>
        </div>
        <div class="envContainer example" id="rvv-xx">
          <p class="envHeader">
            Example: Cross product in different bases.
          </p>
          <div class="envBody">
            <p>
              $\vec{c} = \vec{b} \times
              \vec{a}$, same as above: $\vec{b} =
              3\,\hat{\imath} + 2\,\hat{\jmath}$ and
              $\vec{a} = 5\,\hat{a} - \,\hat{b}$. Then
              $\vec{c} = 15 \,\hat{\imath} \times \,\hat{a}
              - 3 \,\hat{\imath} \times \,\hat{b} + 10
              \,\hat{\jmath} \times \,\hat{a} - 2 \,\hat{\jmath}
              \times \,\hat{b}$. Work out what these are
              individually. Take $\,\hat{a}, \,\hat{b}$ rotated
              by $\pi/4$ from $\,\hat{\imath}, \,\hat{\jmath}$,
              so we can do the cross products by hand or something?
            </p>
          </div>
        </div>
        <div class="envContainer example" id="rvv-xd">
          <p class="envHeader">
            Example: Dot product is independent of basis.
          </p>
          <div class="envBody">
            <p>
              Equation <a href="#rvv-ed">#rvv-ed</a> makes
              it clear that the dot product does not depend on
              which basis we use to write $\vec{a}$ and
              $\vec{b}$, so long as we use the same
              orthonormal basis for both of them. This is because
              the dot product only depends on the lengths and angle
              between the vectors, which are real physical
              quantities that don’t change just because we use a
              different basis.
            </p>
            <p>
              However, we can also verify directly that the component
              equation <a href="#rvv-es">#rvv-es</a> for the dot
              product does not depend on which basis we use. To keep
              the algebra short, we will only do this in 2D.
            </p>
            <p>
              Consider two different orthonormal bases,
              $\hat\imath,\hat\jmath$ and
              $\hat{b},\hat{a}$, with the relationship
            </p>
            <p>
              \[\begin{aligned} \hat{b} &amp;= b_i \, \hat\imath +
              b_j \, \hat\jmath \\ \hat{a} &amp;= a_i \, \hat\imath
              + a_j \, \hat\jmath\end{aligned}\]
            </p>
            <p>
              Now we can write $\vec{a}$ and
              $\vec{b}$ in terms of either basis (see
              <a href="#rvv-xn">#rvv-xn</a>):
            </p>
            <p>
              \[\begin{aligned} \hat{a} &amp;= a_i \, \hat\imath +
              a_j \, \hat\jmath \\ &amp;= a_b \, \hat{b} + a_a \,
              \hat{a} \\ &amp;= a_b (b_i \, \hat\imath + b_j \,
              \hat\jmath) + a_a (a_i \, \hat\imath + a_j \,
              \hat\jmath) \\ &amp;= (a_b b_i + a_a a_i) \,
              \hat\imath + (a_b b_j + a_a a_j) \, \hat\jmath \\
              \hat{b} &amp;= b_i \, \hat\imath + b_j \, \hat\jmath
              \\ &amp;= b_b \, \hat{b} + b_a \, \hat{a} \\ &amp;=
              b_b (b_i \, \hat\imath + b_j \, \hat\jmath) + b_a
              (a_i \, \hat\imath + a_j \, \hat\jmath) \\ &amp;=
              (b_b b_i + b_a a_i) \, \hat\imath + (b_b b_j + b_a
              a_j) \, \hat\jmath.\end{aligned}\]
            </p>
            <p>
              From this we can identify the basis change relations:
            </p>
            <p>
              \[\begin{aligned} a_i &amp;= a_b b_i + a_a a_i \\ a_j
              &amp;= a_b b_j + a_a a_j \\ b_i &amp;= b_b b_i + b_a
              a_i \\ b_j &amp;= b_b b_j + b_a a_j.\end{aligned}\]
            </p>
            <p>
              If we compute the dot product using <a
              href="#rvv-es">#rvv-es</a> in the
              $\hat\imath,\hat\jmath$ basis then we have:
            </p>
            <p>
              \[\begin{aligned} \vec{a} \cdot \vec{b}
              &amp;= a_i b_i + a_j b_j \\ &amp;= (a_b b_i + a_a
              a_i) (b_b b_i + b_a a_i) + (a_b b_j + a_a a_j) (b_b
              b_j + b_a a_j) \\ &amp;= a_b b_b (b_i^2 + b_j^2) +
              a_a b_a (a_i^2 + a_j^2) + (a_b b_a + a_a b_b) (b_i
              a_i + b_j a_j) \\ &amp;= a_b b_b \| \hat{b} \|^2 +
              a_a b_a \| \hat{a} \|^2 + (a_b b_a + a_a b_b)
              (\hat{b} \cdot \hat{a}) \\ &amp;= a_b b_b + a_a
              b_a\end{aligned}\]
            </p>
            <p>
              To get the last line we used the fact that
              $\hat{b}$ and $\hat{a}$ form an orthornormal
              basis, so that they each have length 1 (that is,
              $\|\hat{b}\| = \|\hat{a}\| = 1$) and they are
              orthogonal (that is, $\hat{b} \cdot \hat{a} = 0$).
            </p>
            <p>
              This then shows that
            </p>
            <p>
              \[\begin{aligned} a_i b_i + a_j b_j &amp;= a_b b_b +
              a_a b_a\end{aligned}\]
            </p>
            <p>
              and so it doesn’t matter which basis we use to
              compute $\vec{a} \cdot \vec{b}$, so
              long as we use an orthonormal basis.
            </p>
          </div>
        </div>
      </div>
      <div class="infoCol"></div>
    </div>
    <div class="contentBlock">
      <div id="rvv-st" class="contentCol">
        <h2>
          Time-dependent vectors and bases
        </h2>
        <p>
          We can have dynamic vectors which change over time, so
          their components also change. Alternatively, we can have
          a fixed vector but dynamic basis.
        </p>
        <div class="envContainer example" id="rvv-xv">
          <p class="envHeader">
            Example: Changing vector, fixed basis.
          </p>
          <div class="envBody">
            <p>
              Show a lengthening and rotating vector and how its
              components change over time in a fixed basis.
            </p>
            <canvas id="rvv-xv-c" width="400" height="400"></canvas>
            <script type="application/javascript">
              /* <![CDATA[ */
              rvv_xv_c = new PrairieDrawAnim("rvv-xv-c", function(t) {
              this.addOption("components",false);
              this.addOption("rotate", false);
	      
              this.setUnits(6, 6);
              this.setProp("arrowLineWidthPx",2);
	      
              var O = $V([0, 0]);
              var P = $V([2.5 * Math.cos(t+Math.PI/4), 2.5 * Math.sin(t+Math.PI/4)]);
	      
              if(this.getOption("components")){
	      this.arrow(O, $V([P.e(1), 0]));
	      this.text($V([P.e(1)/2, -0.5]), $V([-1,-1]), "b");
	      this.arrow(O, $V([0, P.e(2)]));
	      this.text($V([-0.5, P.e(2)/2]), $V([-1,1]), "a");
              }
	      
              this.arrow(O, P);
              this.text($V([P.e(1)+0.5, P.e(2)+0.5]), $V([1,1]), "c = b + a");
	      
              this.setProp("arrowLineWidthPx", 1);
              this.arrow($V([-3,0]), $V([3,0]));
              this.text($V([3,0.2]), $V([1,0]), "i");
              this.arrow($V([0,-3]), $V([0,3]));
              this.text($V([0.15,3]), $V([0,1]), "j");
              });
              /* ]]> */
            </script>
            <p>
              <button onclick="rvv_xv_c.toggleOption('components');">See Components</button>
              <button onclick="rvv_xv_c.toggleAnim();">Rotate Vector</button>
            </p>
          </div>
        </div>
        <div class="envContainer example" id="rvv-xb">
          <p class="envHeader">
            Example: Fixed vector, changing basis.
          </p>
          <div class="envBody">
            <p>
              Show a fixed vector, but a rotating basis, and how
              the components change over time.
            </p>
            <canvas id="rvv-xb-c" width="400" height="400"></canvas>
            <script type="application/javascript">
              /* <![CDATA[ */
              rvv_xb_c = new PrairieDrawAnim("rvv-xb-c", function(t) {
              this.addOption("components",false);

              this.setUnits(4, 4);
              this.setProp("arrowLineWidthPx",2);

              var ellipse = function(t, axis){
              if(axis=="x")
	      t = t-Math.PI/2;
              else if(axis=="y")
	      t = t+Math.PI/2;
              
              x = Math.sqrt(2)/2 + 1*Math.cos(t)*Math.cos(Math.PI/4) - 1*Math.sin(t)*Math.sin(Math.PI/4);
              y = Math.sqrt(2)/2 + 1*Math.cos(t)*Math.sin(Math.PI/4) + 1*Math.sin(t)*Math.cos(Math.PI/4);
              return $V([x,y]);
              }
              
              var x_axis = $V([Math.cos(t/2), Math.sin(t/2)]).x(4);
              var y_axis = $V([Math.cos(t/2+Math.PI/2), Math.sin(t/2+Math.PI/2)]).x(4);
              var O = $V([0, 0]);
              var P = $V([Math.sqrt(2), Math.sqrt(2)]);
              
              if(this.getOption("components")){
	      this.arrow(O, ellipse(t, "x"));
	      this.text($V([ellipse(t, "x").e(1)/2, ellipse(t, "x").e(2)/2 - 0.2]), $V([1,0]), "b");
	      this.arrow(O, ellipse(t, "y"));
	      this.text($V([ellipse(t, "y").e(1)/2 - 0.2, ellipse(t, "y").e(2)/2]), $V([0,1]), "a");
              }
              
              this.arrow(O, P);
              this.text($V([P.e(1)+0.5, P.e(2)+0.5]), $V([1,1]), "c = b + a");
              
              //AXES
              this.setProp("arrowLineWidthPx",1);
              this.arrow(O, x_axis);
              this.text($V([x_axis.e(1)/2.55, x_axis.e(2)/2.55]), $V([-1,-1]), "i");
              this.arrow(O, y_axis);
              this.text($V([y_axis.e(1)/2.55 - 0.2, y_axis.e(2)/2.55]), $V([0,-1]), "j");
              });
              /* ]]> */
            </script>
            <p>
              <button onclick="rvv_xb_c.toggleOption('components');">See Components</button>
              <button onclick="rvv_xb_c.toggleAnim();">Change Basis</button>
            </p>
          </div>
        </div>
      </div>
      <div class="infoCol"></div>
    </div>
-->
      </div>
      <div class="footer">
        <p class="copyright">Copyright (C) 2012-2013 Matthew West</p>
      </div>
    </div>
  </body>
</html>
